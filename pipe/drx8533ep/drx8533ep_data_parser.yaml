pipeline:
  name: drx8533ep_data_parser
transform:
  image: us-central1-docker.pkg.dev/neon-shared-service/bei/neon-avro-kafka-loader:v4.7.10
  env:
    # if use default PARSED_START_INDEX and PARSED_END_INDEX, parse all elements in parse_field
    # if use default for FIELD_START_INDEX and FIELD_END_INDEX,
    #   skip first 3 fields (source_id, site_id, readout_time) in parsed schema
    LOG_LEVEL: INFO 
    OUT_PATH: /pfs/out 
    PARSE_FIELD: serial_output
    RELATIVE_PATH_INDEX: "4"
    PARSED_SCHEMA_PATH: /usr/src/app/schemas/drx8533ep/drx8533ep_parsed.avsc 
    SOURCE_TYPE: 'drx8533ep_raw'
  secrets:
  - name: l0-bucket
    env_var: BUCKET_NAME
    key: LO_BUCKET
  - name: pdr-secret
    env_var: PDR_HOST
    key: hostname
  - name: pdr-secret
    env_var: PDR_DBNAME
    key: database
  - name: pdr-secret
    env_var: PDR_USER
    key: username
  - name: pdr-secret
    env_var: PDR_PASSWORD
    key: password
  cmd: 
  - sh
  - "-c"
  - |-
    /bin/bash <<'EOF'

    # Use bash-scrict mode. See http://redsymbol.net/articles/unofficial-bash-strict-mode/
    set -euo pipefail
    IFS=$'\n\t'

    # run data parser
    python3 -m raw_data_parsers.raw_data_parser.data_parser_main

    # Upload L0 files to bucket, compacting with any existing file with the same name
    # when SOURCE_TYPE is drx8533ep_raw, OUT_SOURCE_TYPE is drx8533ep
    OUT_SOURCE_TYPE=${SOURCE_TYPE%%_raw} 
    if [[ -d "$OUT_PATH/$OUT_SOURCE_TYPE" ]]; then
      linkdir=$(mktemp -d)
      shopt -s globstar
      out_parquet_glob="${OUT_PATH}/**/*.parquet"
      # /pfs/out/drx8533ep/2023/01/01/12345/data/file.parquet
      echo "Linking output files to ${linkdir}"
      # set -x # Uncomment for debugging
      for f in $out_parquet_glob; do
        # Parse the path
        [[ "$f" =~ ^$OUT_PATH/(.*)/([0-9]+)/([0-9]+)/([0-9]+)/(.*)/data/(.*)$ ]]
        fsourcetype="${BASH_REMATCH[1]}"
        fyear="${BASH_REMATCH[2]}"
        fmonth="${BASH_REMATCH[3]}"
        fday="${BASH_REMATCH[4]}"
        fsourceid="${BASH_REMATCH[5]}"
        fname="${BASH_REMATCH[6]}"
        outdir="${linkdir}/v2/${fsourcetype}/ms=${fyear}-${fmonth}/source_id=${fsourceid}"
        mkdir -p "${outdir}"
        ln -s "${f}" "${outdir}/${fname}"

        # Upload to bucket, compacting with any existing file 
        ./compact-bucket-copy.py --sourcepath "${linkdir}" --destbucket "${BUCKET_NAME}"
        rm -rf "${outdir}"
      done
      
      # set +x # Uncomment for debugging
      rm -rf $linkdir
    fi

    EOF
input:
  pfs:
    name: DATA_PATH
    repo: drx8533ep_data_source_kafka
    glob: /drx8533ep_raw/*/*/*
parallelism_spec:
  constant: 3
autoscaling: true
resource_requests:
  memory: 500M
  cpu: 0.5
resource_limits:
  memory: 1G
  cpu: 1.5
sidecar_resource_requests:
  memory: 2G
  cpu: 0.5
datum_set_spec:
  number: 1
scheduling_spec:
  node_selector:
    cloud.google.com/gke-ephemeral-storage-local-ssd: 'true'
    nodepool.neonscience.org/pipeline: 'yes'
    cloud.google.com/gke-spot: 'true'
pod_spec: |-
  { "tolerations": [
    {
      "key": "nodepool.neonscience.org/pipeline",
      "operator": "Exists"
    },
    {
      "effect": "NoSchedule",
      "key": "cloud.google.com/gke-spot",
      "operator": "Exists"
    }  
  ] }
