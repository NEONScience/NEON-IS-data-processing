---
pipeline:
  name: parWaterSurface_pub_group_and_package
transform:
  image_pull_secrets: [battelleecology-quay-read-all-pull-secret]
  image: quay.io/battelleecology/neon-is-pub-grp-pack:08f4910889b9ef4daa1cca10b307059f98c9ff5d
  cmd: ["/bin/bash"]
  stdin:
  - "#!/bin/bash"
  - '# Refresh interim directories with each datum (otherwise they persist and cause probs)'
  - rm -rf $OUT_PATH_GROUPER
  - rm -rf $OUT_PATH_TRANSFORMER
  - rm -rf $OUT_PATH_PACKAGER
  - mkdir $OUT_PATH_GROUPER
  - mkdir $OUT_PATH_TRANSFORMER
  - mkdir $OUT_PATH_PACKAGER
  - '# Set some environment variables for the first module'
  - export OUT_PATH=$OUT_PATH_GROUPER
  - '# Run first module - pub_grouper (using environment variables below as input parameters)'
  - python3 -m pub_grouper.pub_grouper_main
  - '# Set some environment variables for the second module'
  - export DATA_PATH=$OUT_PATH_GROUPER
  - export OUT_PATH=$OUT_PATH_TRANSFORMER
  - export YEAR_INDEX=$YEAR_INDEX_TRANSFORMER
  - export DATA_TYPE_INDEX=$DATA_TYPE_INDEX_TRANSFORMER
  - '# Run second module - pub_transformer (using environment variables below as input parameters)'
  - python3 -m pub_workbook_loader.pub_workbook_loader_main
  - python3 -m pub_transformer.pub_transformer_main
  - '# Set some environment variables for the third module'
  - export OUT_PATH=$OUT_PATH_PACKAGER
  - '# Packager needs to be run at monthly glob. Get those paths.'
  - product_month_paths="${OUT_PATH_TRANSFORMER}/*/*/*"
  - for path in $product_month_paths; do
  - '  echo "Processing product-month path $path"'
  - '  export DATA_PATH=$path' 
  - '  # Run third module - pub_packager (using environment variables below as input parameters)'
  - '  python3 -m pub_packager.pub_packager_main'
  - done
  - '# Clean up after 2nd module'
  - rm -rf $OUT_PATH_TRANSFORMER
  - '# Set some environment variables for the fourth module and do some cleanup'
  - export OUT_PATH=$OUT_PATH_PUBFILES
  - export IN_PATH=$OUT_PATH_PACKAGER
  - export LOCATION_PATH=$OUT_PATH_GROUPER
  - '# Run fourth module - pub_files (using environment variables below as input parameters)'
  - python3 -m pub_files.main
  env:
    # Environment variables for 1st module: pub_grouper.
    LOG_LEVEL: INFO
    OUT_PATH_GROUPER: "/tmp/pub_grouper"
    YEAR_INDEX: '3' # Also shared with pub_transform
    GROUP_INDEX: '6'
    DATA_TYPE_INDEX: '7' # Also shared with pub_transform
    GROUP_METADATA_DIR: group # Also shared with pub_transform
    PUBLOC_KEY: site
    LINK_TYPE: COPY
    
    # Environment variables for 2nd (part A) module: pub_workbook_loader.
    OUT_PATH_WORKBOOK: "/tmp/pub_workbooks"
    PRODUCTS: NEON.DOM.SITE.DP1.20042.001 # Format: NEON.DOM.SITE.DPX.XXXXX.XXX,NEON.DOM.SITE.DPX.XXXXX.XXX,etc

    # Environment variables for 2st module (part B): pub_transformer. Also uses GROUP_METADATA_DIR from the grouper
    PRODUCT_INDEX: '3' # input path index of the data product identifier
    YEAR_INDEX_TRANSFORMER: '4' 
    DATA_TYPE_INDEX_TRANSFORMER: '8' 
    DATA_PATH_PARSE_INDEX: '2'
    OUT_PATH_TRANSFORMER: "/tmp/pub_transformer"
    WORKBOOK_PATH: "/tmp/pub_workbooks"

    # Environment variables for 3rd module: pub_packager.
    OUT_PATH_PACKAGER: "/tmp/pub_packager"
    PUBLOC_INDEX: '7' # input path index of the pub package location (typically the site)
    DATE_INDEX: '4' # Starting index of date in path (i.e. year index)
    DATE_INDEX_LENGTH: '2' # length of date index for pub package (should be 2 for monthly)
    SORT_INDEX: '10' # File name index corresponding to date field (delimiter = .)
    
    # Environment variables for 3rd module: pub_files.
    OUT_PATH_PUBFILES: "/pfs/out"
    RELATIVE_PATH_INDEX: '3'
    DB_SECRETS_PATH: /var/db_secret
    GITHUB_PEM_PATH: /var/github_secret/key
    GITHUB_APP_ID: '300002'
    GITHUB_INSTALLATION_ID: '34765458'
    GITHUB_HOST: https://api.github.com
    GITHUB_REPO_OWNER: NEONScience
    GITHUB_README_REPO: neon-metadata-docs
    GITHUB_README_PATH: readme/template.j2
    GITHUB_EML_REPO: neon-metadata-docs
    GITHUB_EML_BOILERPLATE_PATH: eml/neon_components/NEON_EML_Boilerplate.xml
    GITHUB_EML_CONTACT_PATH: eml/neon_components/neon_contact.xml
    GITHUB_EML_INTELLECTUAL_RIGHTS_PATH: eml/neon_components/neon_intellectualRights.xml
    GITHUB_EML_UNIT_TYPES_PATH: eml/neon_components/neon_unitTypes.xml
    GITHUB_EML_UNITS_PATH: eml/neon_components/NEON_units.txt
    GITHUB_BRANCH: main
    
  secrets:
    - name: db-pdr-secret
      mount_path: /var/db_secret
    - name: github-neonscience-app-secret
      mount_path: /var/github_secret

input: 
  join:
  - pfs: 
      name: DATA_PATH
      repo: parWaterSurface_level1_group_consolidate_srf
      # Glob should be monthly and joined with pub_control to hold pub until month is likely complete
      glob: /(*/*)
      joinOn: $1
  - pfs: 
      repo: parWaterSurface_cron_monthly_and_pub_control
      glob: /(*/*)
      joinOn: $1
      empty_files: true
parallelism_spec:
  constant: 2
autoscaling: true
resource_requests:
  memory: 700M
  cpu: 1
resource_limits:
  memory: 1.5G
  cpu: 1.8
sidecar_resource_requests:
  memory: 2G
  cpu: 0.3
sidecar_resource_limits:
  memory: 4Gi
  cpu: 1.2
datum_set_spec:
  number: 1
scheduling_spec:
  node_selector:
    cloud.google.com/gke-ephemeral-storage-local-ssd: "true"
    nodepool.neonscience.org/pipeline: "yes"
    cloud.google.com/gke-spot: "true"
pod_spec: |-
  { "tolerations": [
    {
      "key": "nodepool.neonscience.org/pipeline",
      "operator": "Exists"
    },
    {
      "effect": "NoSchedule",
      "key": "cloud.google.com/gke-spot",
      "operator": "Exists"
    }  
  ] }
