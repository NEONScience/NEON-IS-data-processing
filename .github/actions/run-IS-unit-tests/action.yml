name: "Run IS package unit tests"
description: "Run R unit tests on IS package"

runs:
   using: "composite"
   steps: 
      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
            workload_identity_provider: ${{ env.GCP_PROVIDER }}
            service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
      # 
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"
      # 
      - name: "Docker auth"
        shell: bash
        run: gcloud auth configure-docker ${{ env.GCP_ARTIFACT_HOST }} --quiet
      # 
      # setup-buildx-action for Docker
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3
      # 
      # Login to github registry
      - name: Log into github registry ${{ env.GHCR_REGISTRY }}
        uses: docker/login-action@v3
        with:
            registry: ${{ env.GHCR_REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ env.GITHUB_TOKEN }}
      # 
      # Build and push Docker image with Buildx (don't push on PR) with multiple tags
      # https://github.com/docker/build-push-action
      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
            context: ./
            file: ${{ env.MODULE_PATH }}/Dockerfile
 
      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 4.1.3

      - name: Install R packages
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          packages: |
              fs
              devtools
              rapportools
              arrow@19.0.1.1
              dplyr@1.1.3
              jsonlite@1.8.7
              rlang@1.1.5
          extra-packages: |
              any::covr
              any::xml2
          needs: coverage
          cache: always

      - name: Add libR.so to LD_LIBRARY_PATH
        shell: bash
        run: |
          LIBR_DIR=$(dirname $(find /opt -name "libR.so" | head -n 1))
          echo "LD_LIBRARY_PATH=$LIBR_DIR:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Install Avro
        shell: bash
        run: sudo apt install libavro23

      - name: check out repository
        uses: actions/checkout@v3

      - name: Run ${{ env.MODULE_NAME }} unit test coverage using covr package
        shell: Rscript {0}
        run: |
          # Install NEONprocIS.base
          devtools::install("${{ env.MODULE_BASE_PATH }}")
          library("${{ env.MODULE_BASE_NAME }}")
          # Install NEONprocIS.cal if the module is NEONprocIS.wq
          if ("${{ env.MODULE_NAME }}" == "NEONprocIS.wq") {
          devtools::install("./pack/NEONprocIS.cal")
          library("NEONprocIS.cal")
          }
          #
          library(dplyr)
          library(arrow)
          library(jsonlite)
          library(base)
          library(utils)
          library(rlang)
          library(stringr)
          if ("${{ env.MODULE_NAME }}" != "${{ env.MODULE_BASE_NAME }}") {
            devtools::install("${{ env.MODULE_PATH }}")
            library("${{ env.MODULE_NAME }}")
          }
          devtools::test(pkg="${{ env.MODULE_PATH }}")
          cov <- covr::package_coverage
          # as.data.frame(cov)
          # Generates an interactive HTML report
          covr::report(cov, file="${{COVERAGE_PATH }}/${{ env.MODULE_NAME }}-coverage.html")
          # covr::report(cov, file="coverage.html")
          
      - name: Add/update the test coverage.html to .github/workflows/
        shell: bash
        run: |
          set -euo pipefail
          IFS=$'\n\t'
          git config --local user.email "actions@github.com"
          git config --local user.name "gitHub Actions"
          git checkout choim-IS-tests-github-actions
          echo "Changed files to be committed:"
          git diff --name-only
          git add  -u .
          git commit -m "Add or update the test coverage.html to .github/workflows/"  || echo "No coveage updated"
          git push origin choim-IS-tests-github-actions


      #          
      # Uploads the coverage.html file as a workflow artifact
      # Find the r-coverage-report artifact on the workflow run details page. 
      # Download the artifact and open the coverage.html file in your browser 
      # to explore the detailed test coverage report, including line-by-line coverage information.
      
      # - name: Upload coverage.html artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: r-coverage-report
      #     path: coverage.html
      #     retention-days: 5 # Adjust retention days as needed
          